{"version":3,"sources":["components/Notes.jsx","components/AddNote.jsx","components/NotesList.jsx","components/Search.jsx","components/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["Notes","id","text","date","handleDeleteNote","className","size","onClick","AddNote","handleAddNote","useState","noteText","setNoteText","characterLimit","rows","cols","placeholder","onChange","event","target","value","length","trim","NotesList","notes","map","note","Search","handleSearchNote","classsName","type","Header","handleDarkMode","previousDarkMode","App","nanoid","setNotes","searchtext","setSearchText","darkMode","setDarkMode","useEffect","saveNotes","JSON","parse","localStorage","getItem","setItem","stringify","filter","toLowerCase","includes","Date","newNote","toLocaleDateString","newNotes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01782d32.chunk.js","sourcesContent":["\r\nimport { MdDeleteForever } from 'react-icons/md'\r\n\r\nconst Notes = ({id,text,date,handleDeleteNote}) => {\r\n    return (\r\n        <div className=\"notes\">\r\n            <span>{text}</span>\r\n            <div className=\"note_footer\">\r\n                <small>{date}</small>\r\n                <MdDeleteForever className=\"delete_icon\" size=\"1.3em\" onClick={()=>handleDeleteNote(id)}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notes;\r\n","import {useState} from 'react'\r\nconst AddNote = ({handleAddNote}) => {\r\n    const [noteText,setNoteText]=useState('');\r\n    const handleChange = (event)=>{\r\n        \r\n        if(characterLimit-event.target.value.length>=0){\r\n            setNoteText(event.target.value);\r\n        }\r\n    }\r\n    const handleSaveClick=()=>{\r\n        if(noteText.trim().length>0){\r\n              handleAddNote(noteText);\r\n              setNoteText(\"\");    \r\n        }\r\n      \r\n    }\r\n    var characterLimit=200;\r\n    return (\r\n        <div className=\"notes new\">\r\n            <textarea rows=\"8\" cols=\"10\" placeholder=\"Add Note .....\" onChange={handleChange} value={noteText}></textarea>\r\n            <div className=\"note_footer\">\r\n                <small>{characterLimit - noteText.length} Remaining...</small>\r\n                <button className=\"save\" onClick={handleSaveClick}>Save</button>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNote;\r\n","\r\nimport Notes from './Notes';\r\nimport AddNote from './AddNote';\r\nconst NotesList = ({ notes,handleAddNote,handleDeleteNote }) => {\r\n    return (\r\n        <div className=\"notes_list\">\r\n            {notes.map((note)=>(<Notes key={note.id} id={note.id} text={note.text} date={note.date} handleDeleteNote={handleDeleteNote}/>))}\r\n            <AddNote handleAddNote={handleAddNote}/>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotesList\r\n","import React from 'react'\r\nimport { MdSearch } from 'react-icons/md'\r\n\r\nconst Search = ({handleSearchNote}) => {\r\n    return (\r\n        <div className=\"search_bar\">\r\n          <MdSearch classsName=\"search_icon\" size=\"1.3rem\"/>\r\n          <input onChange={(event)=>{\r\n              handleSearchNote(event.target.value);\r\n          }} type=\"text\" placeholder=\"Search Notes........\"></input>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\n\r\nconst Header = ({handleDarkMode}) => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>Notes</h1>\r\n            <button className=\"save toggle\" onClick={()=>\r\n            handleDarkMode((previousDarkMode)=>!previousDarkMode)}>\r\n            \r\n            Toggle\r\n                    \r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport NotesList from \"./components/NotesList\";\nimport Search from \"./components/Search\";\nimport Header from \"./components/Header\";\nconst App = () => {\n  const [notes, setNotes] = useState([\n    {\n      id: nanoid(),\n      text: \"Demo Note Can Be deleted\",\n      date: \"16/08/2021\",\n    },\n  ]);\n  const addNote = (text) => {\n    const date = new Date();\n    var newNote = {\n      id: nanoid(),\n      text: text,\n      date: date.toLocaleDateString(),\n    };\n\n    const newNotes = [...notes, newNote];\n    setNotes(newNotes);\n  };\n  const deleteNote = (id) => {\n    const newNotes = notes.filter((note) => note.id !== id);\n    setNotes(newNotes);\n  };\n\n  // search hook\n  const [searchtext, setSearchText] = useState(\"\");\n\n  const [darkMode, setDarkMode] = useState(false);\n  useEffect(() => {\n    const saveNotes = JSON.parse(localStorage.getItem(\"react_notes_data\"));\n\n    if (saveNotes) {\n      setNotes(saveNotes);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"react_notes_data\", JSON.stringify(notes));\n  }, [notes]);\n\n  return (\n    <div id=\"base_container\" className={`${darkMode && \"dark-mode\"}`}>\n      <div className=\"container\">\n        <Header handleDarkMode={setDarkMode} />\n        <Search handleSearchNote={setSearchText} />\n        <NotesList\n          notes={notes.filter((note) =>\n            note.text.toLowerCase().includes(searchtext.toLowerCase())\n          )}\n          handleAddNote={addNote}\n          handleDeleteNote={deleteNote}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}